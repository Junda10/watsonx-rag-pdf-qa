from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA

import gradio as gr

# Suppress warnings
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings("ignore")

# ------------------------------
# LLM
# ------------------------------
def get_llm():
    model_id = "ibm/granite-3-8b-instruct"
    parameters = {
        "temperature": 0.5,
        "max_new_tokens": 256
    }
    project_id = "skills-network"

    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url="https://us-south.ml.cloud.ibm.com",
        project_id=project_id,
        params=parameters,
    )
    return watsonx_llm

# ------------------------------
# PDF Loader
# ------------------------------
def document_loader(file):
    loader = PyPDFLoader(file)  # FIX: file is already a filepath
    loaded_document = loader.load()
    return loaded_document

# ------------------------------
# Text Splitter
# ------------------------------
def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=100,
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks

# ------------------------------
# Embedding Model
# ------------------------------
def watsonx_embedding():
    embed_params = {
        "input_type": "passage"
    }
    watsonx_embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        url="https://us-south.ml.cloud.ibm.com",
        project_id="skills-network",
        params=embed_params,
    )
    return watsonx_embedding

# ------------------------------
# Vector Database
# ------------------------------
def vector_database(chunks):
    embedding_model = watsonx_embedding()
    vectordb = Chroma.from_documents(chunks, embedding_model)
    return vectordb

# ------------------------------
# Retriever
# ------------------------------
def retriever(file):
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vectordb = vector_database(chunks)
    retriever = vectordb.as_retriever()
    return retriever

# ------------------------------
# QA Chain
# ------------------------------
def retriever_qa(file, query):
    llm = get_llm()
    retriever_obj = retriever(file)
    qa = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=retriever_obj,
        return_source_documents=True
    )

    # FIX: invoke must pass {"query": query}
    response = qa.invoke({"query": query})

    # Extract answer
    answer = response.get("result", "")

    # Extract sources safely
    src_docs = response.get("source_documents", [])
    sources = "\n\n---\n\n".join(
        [f"Page {doc.metadata.get('page', '?')}:\n{doc.page_content[:800]}" for doc in src_docs]
    ) if src_docs else "No source documents returned."

    return answer, sources

# ------------------------------
# Gradio Interface with Tabs
# ------------------------------
with gr.Blocks() as rag_application:
    gr.Markdown("## ðŸ“˜ Watsonx PDF QA Bot")
    gr.Markdown("Upload a PDF and ask any question. The bot will answer and also show the relevant source passages.")

    with gr.Row():
        file_input = gr.File(label="Upload PDF File", file_types=[".pdf"], type="filepath")
        query_input = gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")

    with gr.Tabs():
        with gr.Tab("ðŸ’¡ Answer"):
            answer_output = gr.Textbox(label="Answer", lines=10)
        with gr.Tab("ðŸ“„ Source Documents"):
            sources_output = gr.Textbox(label="Source Documents", lines=15)

    submit_btn = gr.Button("Ask")

    submit_btn.click(
        fn=retriever_qa,
        inputs=[file_input, query_input],
        outputs=[answer_output, sources_output]
    )

# ------------------------------
# Launch App
# ------------------------------
rag_application.launch(server_name="0.0.0.0", server_port=7860, share=True)
